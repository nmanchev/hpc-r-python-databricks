---
title: "Using Databricks with Spark"
format: html
editor: visual
---

# Setup

## Load Packages and Connect to Databricks

```{r}
library(tidyverse)
library(sparklyr)
library(dbplyr)
library(sparklyr)

sc <- spark_connect(
    cluster_id = "0606-201802-s75pygqn",
    version = "14.3",
    method = "databricks_connect"
)
```

## Create a query to format the data

Preview the query

```{r}
base_query <- tbl(sc, in_catalog("posit_demo", "default", "lending_club")) |>
      filter(!is.na(addr_state)) |>
      mutate(region = case_when(stringr::str_sub(zip_code, 1, 1) %in% c("8","9") ~ "West",
                                stringr::str_sub(zip_code, 1, 1) %in% c("6","5","4") ~ "Midwest",
                                stringr::str_sub(zip_code, 1, 1) %in% c("7","3","2") ~ "South",
                                stringr::str_sub(zip_code, 1, 1) %in% c("1","0") ~ "East",
                                TRUE ~ NA_character_)) |>
      filter(!is.na(region)) |>
      select(member_id, region, grade, sub_grade, loan_amnt, funded_amnt,
             term, int_rate, emp_title, emp_length, annual_inc, loan_status,
             purpose, title, zip_code, addr_state, dti, out_prncp) |>
      mutate(office_no = stringr::str_sub(zip_code, 1, 3),
             out_prncp = as.numeric(out_prncp))
base_query
```

View the SQL generated

```{r}
show_query(base_query)
```

## Compute basic summary statistics

Build on the existing query and collect the results

```{r}
summary_stats <- base_query |>
  group_by(region, grade) |>
  summarise(out_prncp = sum(out_prncp, na.rm = TRUE)) |>
  collect()

summary_stats
```

## Graph the results

```{r}
summary_stats |>
 ggplot(aes(x = grade, y = out_prncp, fill = grade)) +
      geom_col() +
      guides(fill = "none") +
      theme(
        axis.text = element_text(size = 14, face = "bold"),
        axis.title = element_text(size = 14, face = "bold"),
        strip.text.x = element_text(
          size = 14, face = "bold"
        ),
        strip.text.y = element_text(
          size = 14, face = "bold"
        )
      ) +
      facet_wrap(~region) +
      scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6)) +
      ylab("Loan Principal") +
      xlab("Loan Grade")
```
